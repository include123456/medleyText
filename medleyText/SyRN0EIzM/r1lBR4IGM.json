{"_id":"r1lBR4IGM","title":"","body":{"entityMap":{},"blocks":[{"key":"ag6qs","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"59kd9","text":"Hibernate拦截器(Interceptor)与事件监听器(Listener) ","type":"header-two","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fq3d6","text":"　　拦截器（Intercept）：与Struts2的拦截器机制基本一样，都是一个操作穿过一层层拦截器，每穿过一个拦截器就会触发相应拦截器的事件做预处理或善后处理。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ai4vk","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eskgo","text":"　　监听器（Listener）：其实功能与拦截器是相似的，但它实现原理不同，它是为每一个事件注册一个或多个监听器，一旦事件发生，则事件源通知所有监听该事件的监听器，然后监听器处理通知（观察者模式）。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"14h48","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a8t7r","text":"Hibernate为我们提供了实现拦截器的接口org.hibernate.Interceptor，它里面提供了许多拦截事件。通常不需要实现这个接口，因为我们实现自己的拦截器不可能每一个事件都是必须的。所以Hibernate为我们提供了org.hibernate.Interceptor接口的一个空实现类org.hibernate.EmptyIntercept，通常情况下我们只需继承这个空实现类，Override需要的事件方法即可。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7gfu4","text":"设置拦截器后，相应的操作都会先穿过一层层相应的拦截器，让拦截器执行预处理或善后处理。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fo4mp","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"76jkb","text":"","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012314330446.png"}},{"key":"3l975","text":"public class AutoUpdateTimeInterceptor extends EmptyInterceptor","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5ml18","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9p0jj","text":"    private static final long serialVersionUID = -8597658125309889388L;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"16phe","text":"    ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dcccd","text":"    /*","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"emvbt","text":"     * entity - POJO对象","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cj5fv","text":"     * id - POJO对象的主键","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"88rh4","text":"     * state - POJO对象的每一个属性所组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b91q7","text":"     * propertyNames - POJO对象的每一个属性名字组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d2pv9","text":"     * types - POJO对象的每一个属性类型所对应的Hibernate类型组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"csga0","text":"     */","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cqkb3","text":"    @Override","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ff1c2","text":"    public boolean onSave(Object entity, Serializable id, Object[] state,","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ssah","text":"            String[] propertyNames, Type[] types)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"djceo","text":"    {    ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"93pvf","text":"        if (entity instanceof People)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fm275","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5hfkg","text":"            for (int index=0;index<propertyNames.length;index++)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2af30","text":"            {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5bq4p","text":"                /*找到名为\"checkinTime\"的属性*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c9d9a","text":"                if (\"checkinTime\".equals(propertyNames[index]))","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"60rf4","text":"                {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"381f9","text":"                    /*使用拦截器将People对象的\"checkinTime\"属性赋上值*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e8v5b","text":"                    state[index] = new Timestamp(new Date().getTime());","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"blpn4","text":"                    return true;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1to7s","text":"                }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"72uen","text":"            }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5md8r","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"78pil","text":"        return false;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7dp6n","text":"    }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ed6mg","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"avk6c","text":"","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fgv06","text":"场景类：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8p5p9","text":"public class Client","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7dp43","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"696n4","text":"    public static void main(String[] args)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"77t9q","text":"    {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cmukj","text":"        /*为Session添加拦截器*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2gp6d","text":"        Session session = HibernateUtil.getSessionFactory().openSession(new AutoUpdateTimeInterceptor());","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9pl26","text":"        Transaction tx = null;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"duavg","text":"        try","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a1lga","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ett08","text":"            tx = session.beginTransaction();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"alj3j","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f0mto","text":"            People people = new People();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9h2q3","text":"            people.setName(\"zhangsan\");","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"buul5","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"479br","text":"            session.save(people);","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8cu4n","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a06qf","text":"            tx.commit();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fp9tt","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6jeed","text":"        catch (Exception e)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c7oc0","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"gia6","text":"            if(tx!=null)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bekrr","text":"            {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dphht","text":"                tx.rollback();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7co2k","text":"            }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6qoij","text":"             e.printStackTrace();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6v49d","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3a93r","text":"        finally","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"65tpt","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cmv1u","text":"            session.close();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d6rmi","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dqb1r","text":"    }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d89fp","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fej2h","text":" 查看数据库：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"575lr","text":"     ","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012315345532.png"}},{"key":"a5261","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9ruvd","text":"可以看到checkin_time这列属性依然被赋值了，说明该赋值操作是拦截器帮助我们完成的。使用拦截器的时候需要注意拦截器的返回值，我以前一直以为拦截器的返回值会控制一个操作是否可以继续，通过实验发现，即使返回false操作也会继续执行的，只是返回false的话，拦截器的所有设置都是无效的，不会反应到数据库中。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bg2fv","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bkvk2","text":"返回false：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"q3b","text":"public class AutoUpdateTimeInterceptor extends EmptyInterceptor","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b9pi5","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5r72","text":"    private static final long serialVersionUID = -8597658125309889388L;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fenno","text":"    ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4d1hb","text":"    /*","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"tthp","text":"     * entity - POJO对象","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"22jo7","text":"     * id - POJO对象的主键","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bmkgd","text":"     * state - POJO对象的每一个属性所组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bggqu","text":"     * propertyNames - POJO对象的每一个属性名字组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f88tp","text":"     * types - POJO对象的每一个属性类型所对应的Hibernate类型组成的集合(除了ID)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d44s6","text":"     */","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fp266","text":"    @Override","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"15kmc","text":"    public boolean onSave(Object entity, Serializable id, Object[] state,","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"et12e","text":"            String[] propertyNames, Type[] types)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ccl1v","text":"    {    ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7dhqc","text":"        if (entity instanceof People)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3f5pj","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"al396","text":"            for (int index=0;index<propertyNames.length;index++)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"alf6c","text":"            {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5a71c","text":"                /*找到名为\"checkinTime\"的属性*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7vo8e","text":"                if (\"checkinTime\".equals(propertyNames[index]))","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3l1pv","text":"                {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6r8hg","text":"                    /*使用拦截器将People对象的\"checkinTime\"属性赋上值*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ae2eg","text":"                    state[index] = new Timestamp(new Date().getTime());","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dusn3","text":"//                  return true;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"alrj1","text":"                }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ds7o","text":"            }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"flbaj","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9vha3","text":"","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7bub7","text":"        return false;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9f2fu","text":"    }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bhc42","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5koaa","text":"查看插入的数据：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f0qn","text":"","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012315345532.png"}},{"key":"95hpc","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1g1tg","text":"可以看到数据依然保存到数据库中了，但拦截器的操作并没有反映到数据库中，拦截器的操作是无效的。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1dfm6","text":"但是比较奇怪的是Console输出的SQL语句：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dd8lr","text":"Hibernate: ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fb08d","text":"    insert ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4nclr","text":"    into","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9bc9r","text":"        people","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5saqm","text":"        (name, checkin_time, id) ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1u10e","text":"    values","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5s82h","text":"        (?, ?, ?)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"181tr","text":"Hibernate: ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c4biv","text":"    update","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5aadb","text":"        people ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3q38l","text":"    set","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1tf61","text":"        name=?,","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2moob","text":"        checkin_time=? ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7hf48","text":"    where","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ca491","text":"        id=?","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7509h","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"82a7t","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1776n","text":"居然多了一条Update语句，我使用了p6spy显示了这两条SQL语句的绑定值：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"50v3u","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9nkio","text":"","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"153b1","text":"insert into people (name, checkin_time, id) values (?, ?, ?)|insert into people (name, checkin_time, id) values ('zhangsan', '2012-01-23 15:41:47.45', '402881e53509837f0135098380370001')","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"739i5","text":"update people set name=?, checkin_time=? where id=?|update people set name='zhangsan', checkin_time='' where id='402881e53509837f0135098380370001'","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"58evd","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cn6c1","text":"　　可以看到，拦截器的操作会直接反映到数据库中的，但是如果返回值是false的话，Hibernate会产生一条Update SQL语句将拦截器的操作结果取消了。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dmfgb","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fqfnu","text":"　　最后，Hibernate的拦截器有两种设置方式，一种是使用sessionFactory.openSession(Interceptor interceptor)，这样的拦截器只会针对该session有效，又叫做局部拦截器。另一种是使用Configuration的setInterceptor(Interceptor interceptor)方法设置，这样的拦截器对每一个session都有效，又称之为全局拦截器。 ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ff1fl","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3rh2s","text":"                                                                事件监听器","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4g43g","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cjcj1","text":"　　基本上，Session接口的每个方法都有相对应的事件。比如 LoadEvent，FlushEvent，等等（查阅XML配置文件的DTD，以及org.hibernate.event包来获得所有已定义的事件的列表）。当某个方法被调用时，Hibernate Session会生成一个相对应的事件并激活所有配置好的事件监听器。系统预设的监听器实现的处理过程就是被监听的方法要做的（被监听的方法所做的其实仅仅是激活监听器， “实际”的工作是由监听器完成的）。不过，你可以自由地选择实现一个自己定制的监听器（比如，实现并注册用来处理处理LoadEvent的LoadEventListener接口）， 来负责处理所有的调用Session的load()方法的请求。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9139h","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dpmks","text":"　　在定义自己的事件监听器时，其实不需要实现XXXListener接口，Hibernate为了方便我们定义事件监听器，已经为每个事件监听器接口实提供了一个默认的实现。在org.hibernate.event.def包下面可以找到Hibernate为我们提供的默认实现，我们只需要继承这些默认实现，在其基础上添加我们自定义的功能即可。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a0moe","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e0098","text":"事件监听器的简单示意图：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"17pml","text":"","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012316020581.png"}},{"key":"4eo4g","text":"当某个方法被调用时，Hibernate Session会生成一个相对应的事件并激活所有配置好的事件监听器。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"34q8j","text":"public class SaveOrUpdateListener extends DefaultSaveOrUpdateEventListener","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1vtjl","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7easr","text":"    private static final long serialVersionUID = 7496518453770213930L;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"362l2","text":"","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"aueml","text":"    /*监听保存或更新事件*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7mcql","text":"    @Override","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a68ua","text":"    public void onSaveOrUpdate(SaveOrUpdateEvent event)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9r7e1","text":"    {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b9vgh","text":"        People people = null;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9t4l5","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bovs7","text":"        if(event.getObject() instanceof People)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c3hb5","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"rgp0","text":"            people = (People)event.getObject();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2nssh","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3uofk","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"68pmf","text":"        people.setCheckinTime(new Timestamp(new Date().getTime()));","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"26ei0","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fv8qm","text":"        System.out.println(\"invoke!\");","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dib0e","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2mn2a","text":"        /*一定要调用父类提供的功能，不然就和继承接口一样了*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f6p1a","text":"        super.onSaveOrUpdate(event);","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ju3t","text":"    }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4p8l6","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9fhet","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d5la6","text":" 通过hibernate.cfg.xml配置文件将事件监听器配置到Hibernate中：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6mej7","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ar1l2","text":"第一种配置方式： ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ahk2r","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"85o6c","text":"//配置到 sessionFactory 可以监听多种类型","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d7nbj","text":"<event type=\"save-update\">","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dbbnl","text":"    <listener class=\"com.suxiaolei.hibernate.listener.SaveOrUpdateListener\"/>","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cg0eh","text":"</event>","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"64b7e","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e762o","text":"第二种配置方式：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eeftm","text":"","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1cj5t","text":"<listener class=\"com.suxiaolei.hibernate.listener.SaveOrUpdateListener\" type=\"save-update\"/>//只能监听一种类型","type":"custom-code-block-html","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8m5hf","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b82ep","text":"　　两种配置方式产生的效果都是一样的。只是一个以\"事件\"为主，一个以\"监听器\"为主。type是指定监听事件的类型，class指定监听器的实现类，一个事件可以有多个监听器。type有许多取值，下表列出了所有type的值:","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"285nu","text":"注意：直接使用<listener>元素注册监听器，对于同一个type指定的事件类型只能指定一个监听器，如果指定了多个，只有最后一个有效，","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"abn3c","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5v3et","text":"上面列表每一个选项对应着一个特定的事件。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"auirr","text":"","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012320254341.png"}},{"key":"77chc","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8095u","text":"场景类：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"35suc","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"48csc","text":"public class Client","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eom01","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f41so","text":"    public static void main(String[] args)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"29jk","text":"    {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cmf8k","text":"        Session session = HibernateUtil.getSessionFactory().openSession();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c9tji","text":"        Transaction tx = null;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ucft","text":"        try","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e6gjv","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8avtk","text":"            tx = session.beginTransaction();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fhnbb","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"97uk2","text":"            People people = new People();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"520i2","text":"            people.setName(\"lisi\");","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dft4j","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"daulu","text":"            session.saveOrUpdate(people);","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3uleq","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9rtn4","text":"            tx.commit();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ma0d","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"98s5u","text":"        catch (Exception e)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"43f89","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d4ubi","text":"            if(tx!=null)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"b83ja","text":"            {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"291bo","text":"                tx.rollback();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6nm0t","text":"            }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c0tj0","text":"            ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d6mfr","text":"            e.printStackTrace();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"40a1o","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"u65k","text":"        finally","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6tvhd","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7gjl7","text":"            session.close();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2kg0v","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4li4q","text":"    }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ehut1","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3s62p","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cf8e4","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d11et","text":"people对象依然没有设置checkinTime属性，运行程序后，查看数据库：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"58ekc","text":"","type":"image","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{"src":"http://pic002.cnblogs.com/images/2012/369936/2012012320312436.png"}},{"key":"1da12","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8ksso","text":"可以看到，checkin_time字段的依然赋值了，说明我们配置的事件监听器生效了。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4eo32","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8787n","text":"使用事件监听器我发现需要注意父类行为的顺序，例如：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4kmrs","text":"复制代码","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"65u1h","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c96b9","text":"public void onSaveOrUpdate(SaveOrUpdateEvent event)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dbb5n","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dvveq","text":"        People people = null;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ebdcu","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6ks45","text":"        if(event.getObject() instanceof People)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fl02f","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2nhng","text":"            people = (People)event.getObject();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bmrau","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2g4g4","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"mi2q","text":"        people.setCheckinTime(new Timestamp(new Date().getTime()));","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2r6ek","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dauqr","text":"        System.out.println(\"invoke!\");","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6v4co","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d5949","text":"        /*一定要调用父类提供的功能，不然就和继承接口一样了*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5ous8","text":"        super.onSaveOrUpdate(event);","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8u8n0","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1ga60","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1kn3v","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"tvru","text":"public void onSaveOrUpdate(SaveOrUpdateEvent event)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"d563a","text":"{","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"25ir8","text":"        /*一定要调用父类提供的功能，不然就和继承接口一样了*/","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3l734","text":"        super.onSaveOrUpdate(event);","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"74et","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a4m3u","text":"        People people = null;","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8cvvh","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5sv9s","text":"        if(event.getObject() instanceof People)","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3mfa2","text":"        {","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3rvb8","text":"            people = (People)event.getObject();","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"h9sf","text":"        }","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2pah1","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9kma2","text":"        people.setCheckinTime(new Timestamp(new Date().getTime()));","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6p6m1","text":"        ","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e5tlg","text":"        System.out.println(\"invoke!\");","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"31d20","text":"}","type":"custom-code-block-java","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8fdrg","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e7l0n","text":"　　例如上面的顺序，虽然最后产生的效果一致，但是第二种顺序会多产生一条update语句，有可能会产生性能问题，所以在使用事件监听器的时候需要多加注意。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c0ah8","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2hqt5","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8b6ru","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}]},"dateCreated":"2017-12-19T07:22:32.195Z","lastUpdated":"2017-12-19T08:47:51.513Z","notebookId":"SyRN0EIzM"}
