{"_id":"B1PAyhEGG","title":"","body":{"entityMap":{},"blocks":[{"key":"ag6qs","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"931tq","text":"sql ","type":"header-two","depth":0,"inlineStyleRanges":[{"offset":0,"length":4,"style":"BOLD"}],"entityRanges":[],"data":{}},{"key":"dbbnk","text":"运用sqL 查询出来的数据 需要用一个一个进行封装成对象  ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8h0s9","text":"或者使用 addEnity进行一次封装","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a5r4o","text":"创建表 ： 主键类型  ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cj4tn","text":"create table jack (id int ,name varchar2(20),constraint ixd_id primary key(id));  有命名  ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3fj4q","text":"create table jack (id int primary key not null,name varchar2(20))    ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f7jvc","text":"create table jack as select * from dba_objects;  //进行表的复制 只复制结构 加上 where 1=0  ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3486g","text":"create index ind_object_id on jack(object_id)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2e67m","text":"增加字段","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"anbtr","text":"alter table tablename add 字段 类型","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f1jg8","text":"增加注释 ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3n5hf","text":" ALTER TABLE table_name COMMENT='这是表的注2  ALTER table table_name MODIFY `column_name` datetime DEFAULT NULL COMMENT '这是字段的注释'  ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"69p0c","text":"改变字段的类型","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7i2mb","text":"ALTER TABLE tableName modify column columnName 类型;","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ecudq","text":"例如Mysql的修改字段类型语句：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3ppdv","text":"alter table test modify column name varchar(255);","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fpkds","text":"","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"4abjq","text":"Oracle修改字段类型和长度语句：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"co207","text":"ALTER TABLE tableName modify(columnName 类型);","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"lkh5","text":"alter table test modify(name varchar(255));","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7qur3","text":"UPPER(str) ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cs9av","text":"返回字符串str，根据当前字符集映射的所有字符更改为大写。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dahvd","text":"substr(字符串,截取开始位置,截取长度) //返回截取的字","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dgeoj","text":"substr('Hello World',0,1) //返回结果为 'H'  *从字符串第一个字符开始截取长度为1的字符串","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"advt3","text":"substr('Hello World',1,1) //返回结果为 'H'  *0和1都是表示截取的开始位置为第一个字符","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"f92oj","text":"substr('Hello World',2,4) //返回结果为 'ello'","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7p7st","text":"substr('Hello World',-3,3)//返回结果为 'rld' *负数(-i)表示截取的开始位置为字符串右端向左数第i个字符","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"e49ql","text":"FUNCTION PUB_GET_STRING_PY(strs varchar2)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dmiqr","text":"提取汉字字符串的拼音的首字母，其中去掉空格保留原有字母和数字：   ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9k2tq","text":"创建大数据类型 Hibernate.createClob(string);","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dh4vu","text":"oracle 读取大数据类型   ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"64seg","text":"Reader charcter = list(i).getClob().getCharacterStream();  ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"87kga","text":"BufferRead bRead = new BufferRead(charcter);  ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3p4a2","text":"String str = bReader.readLine();","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5brjb","text":"StringBuffer sb = new StringBuffer();","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6rn3d","text":"while(str!=null) {","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2vo3v","text":"sb.append(str);","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cg62q","text":"str = bread.readLine();","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6cumm","text":"}    ","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"782su","text":"charcter.close();","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1b6n3","text":"bRead.close();","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"11uge","text":"下面是关于rownum的介绍","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"cmdbg","text":"================================","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2pnna","text":"三、 Rownum和row_number() over()的使用","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7io6h","text":"ROWNUM是oracle从8开始提供的一个伪列，是把SQL出来的结果进行编号，始终从1开始，常见的用途就是用来分页输出.","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"anih3","text":"比如 ","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"29o04","text":"SELECT *","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"2f6o3","text":"  FROM torderdetail a","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dbn7m","text":"  WHERE ROWNUM <= 10","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6uq9d","text":"这条语句就是输出前10条纪录，在这里用途上类似于sql sever的top，不过rownum对于指定编号区间的输出应该说更强大","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"a0am7","text":"SELECT *","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fsp1v","text":"  FROM (SELECT a.*, ROWNUM rn","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5oict","text":"  FROM torderdetail a)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"colo1","text":"  WHERE rn >= 10 AND rn <= 20","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ci79c","text":"这条语句即是输出第10到第20条纪录，这里之所以用rownum rn，是把rownum转成实例，因为rownum本身只能用<=的比较方式，只有转成实列，这样就可做 >=的比较了。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"avc4f","text":"在实际用途中，常常会要求取最近的几条纪录，这就需要先对纪录进行排序后再取rownum<=","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"dcce3","text":"一般常见的","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"eqijm","text":"SELECT *","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"c5a66","text":"  FROM (SELECT a.*","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"fvq8d","text":"  FROM torderdetail a","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1q432","text":"  ORDER BY order_date DESC)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9s3o4","text":" WHERE ROWNUM <= 10","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3b5js","text":"而在CSDN曾经发生过讨论，关于取近的10条纪录，有人给出这样的语句","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"bdsf9","text":"SELECT a.*","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"debgs","text":"  FROM torderdetail a","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"3cg0s","text":"  WHERE ROWNUM <= 10","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"76i07","text":"ORDER BY order_date DESC","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5khpc","text":"之所以会出现这样的语句，主要是从效率上的考虑，前面条语句，是要进行全表扫描后再排序，然后再取10条纪录，后一条语句则不会全表扫描，只会取出10条纪录，很明显后条语句的效率会高许多。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"1mhli","text":"那为什么会有争议呢，那就在于在执行顺序上争议，是先执行排序取10条纪录，还是取10条纪录，再排序呢？两种顺序取出来的结果是截然相反的，先排序再取10条，就是取最近的10条，而先取10条，再排序，则取出的最早的10条纪录。对于此语句，普遍的认为执行顺序是先取10条纪录再排序的。所以此语句应该是错误。但实际上并非如此，此语句的执行顺序和order by的字段有关系，如果你order by 的字段是pk，则再是先排序，取10条（速度比第一种语句快），而排序字段不是PK 时，是先取10条再排序，此时结果就与要求不一样了，所以第二种写法一定要在排序字段是主键的情况下才能保证结果正确。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"anfcd","text":"Row_number() over()这个分析函数是从9I开始提供的，一般的用途和rownum差不多。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"6scdr","text":"一般写法row_number() over( order by order_date desc) 生成的顺序和rownum的语句一样，效率也一样（对于同样有order by 的rownum语句来说），所以在这种情况下两种用法是一样的。","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ef6rf","text":"而对于分组后取最近的10条纪录，则是rownum无法实现的，这时只有row_number可以实现，row_number() over(partition by 分组字段 order by 排序字段)就能实现分组后编号，比如说要取近一个月的每天最后10个订单纪录","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"101i8","text":"SELECT *","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"15jj","text":"  FROM (SELECT a.*,","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"8qcd0","text":"ROW_NUMBER () OVER (PARTITION BY TRUNC (order_date) ORDER BY order_date DESC)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"7pusv","text":"  rn","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9gsmk","text":"  FROM torderdetail a)","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9tu0q","text":" WHERE rn <= 10","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"5tqh9","text":"Rownum的另类用法，有时候我们会遇到这种需求，要求输出当月的所有天数，许多人会烦恼，数据库里又没有这样的表，怎么输出一个月的所有天数呢？用rownum就能解决：","type":"unstyled","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"erf30","text":"SELECT TRUNC (SYSDATE, 'MM') + ROWNUM - 1","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"9sgo","text":"  FROM DUAL","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}},{"key":"ea9nk","text":"CONNECT BY ROWNUM <= TO_NUMBER (TO_CHAR (LAST_DAY (SYSDATE), 'dd'))","type":"custom-code-block-sql","depth":0,"inlineStyleRanges":[],"entityRanges":[],"data":{}}]},"dateCreated":"2017-12-18T03:02:39.279Z","lastUpdated":"2017-12-18T03:13:55.576Z","notebookId":"HkfhF54zz"}
